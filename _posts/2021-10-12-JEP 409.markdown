---
layout: post
title:  "JEP 409: Sealed Classes"
date:   2021-10-12 15:50:06 +0800
categories: java jep sealed
---

写一下关于jep 409 sealed classed 的一些个人理解

这个jep（java enhance proposal）是在java15被提出（jep360），java17正式发布的，它的目的在于限制类的继承。
因为按照目前java的继承机制来讲，除非一个被设置为final，否则可以被任何类所继承，可以有无数的子类，然后子类又有子类，结果就是类的继承体系越来越复杂，继承的规模也越来越庞大。这样带来的一个问题就是类的管理就会变得越来越难。而被sealed 的修饰符所修饰的类，它只能被所指定的子类继承，前提是子类和父类在同一个module中，如果是匿名module，那么他们就需要在同一个package当中。关于module（JSR376） 在java9中正式被发布出来，以后有时间会写一部分关于module的东西。回到sealed的修饰符，举个简单的例子：

```java
package java.lang.constant;

public sealed interface ConstantDesc
    permits String, Integer, Float, Long, Double,
            ClassDesc, MethodTypeDesc, DynamicConstantDesc { ... }

// ClassDesc is designed for subclassing by JDK classes only
public sealed interface ClassDesc extends ConstantDesc
    permits PrimitiveClassDescImpl, ReferenceClassDescImpl { ... }
final class PrimitiveClassDescImpl implements ClassDesc { ... }
final class ReferenceClassDescImpl implements ClassDesc { ... } 

// MethodTypeDesc is designed for subclassing by JDK classes only
public sealed interface MethodTypeDesc extends ConstantDesc
    permits MethodTypeDescImpl { ... }
final class MethodTypeDescImpl implements MethodTypeDesc { ... }

// DynamicConstantDesc is designed for subclassing by user code
public non-sealed abstract class DynamicConstantDesc implements ConstantDesc { ... }
```
上述代码来自java.lang.constant package，可以自行参阅。sealed修饰符指定了被限制的类，permits指明了可以继承此类的子类。而被permits所指定的子类可以被sealed，final或者non-sealed所修饰，其中non-sealed是默认的修饰符。除此之外，子类和父类之间的继承关系中不能再有其他的类插入。

从JVM的层面来说，虽然sealed修饰符跟public一样是类的的修饰符，但是在class文件当中并没有对应的ACC_SEALED标识，它实际上是通过PermittedSubclasses 属性来实现的，具体的class文件里的对应的结构如下：
``` class
PermittedSubclasses_attribute {
    u2 attribute_name_index;
    u4 attribute_length;
    u2 number_of_classes;
    u2 classes[number_of_classes];
}
```

从JAVA语言层面来讲，这个修饰符带来的影响是java.lang.Class 中增加了两个方法，如下：
```java
Class<?>[] getPermittedSubclasses()
boolean isSealed()
```
具体的含义直接从方法名就可以看出来了，就不解读了。


这是java17最新发布出来的jep，鉴于java17是一个长期支持的版本(LTS),简单说一下从java7到java17的变化中，个人认为比较有意思的变化吧

java8 中的lambda表达式，java9中的module，java15中的records以及java17中的sealed

lambda表达式应该说是java这些年来比较重大的一个变化了，它的出现代表着java开始尝试使用面向过程的思想去处理问题，不再像以前只用面向过程的思想去处理问题。这两种思想并没有优劣之分，不同之处在于面向对象是站在人类的角度去抽象问题，面向过程是站在计算机的角度去抽象问题，这样就导致面向对象更易于人类理解和使用，而面向过程对于计算机而言更加友好，当然如果你可以把自己想成计算机，那么面向过程更适合一些。这里我使用“尝试”这个词，是因为就java目前的抽象过程能力而言，还是太弱了，希望以后可以看到更好的改进吧，毕竟是第一步，步子大了容易扯着蛋。

module则是给java带来了模块化的功能，强化了java对于作用域的管理，同时也加强了java代码的管理能力。

至于后续的变化只能说有趣，对于java语言来讲并没有特别重大的影响，可以更好的辅助开发者完成对于问题的抽象，至于代码优雅之类的，看个人水平。